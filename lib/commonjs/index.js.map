{"version":3,"names":["ComponentName","ReactNativeUnityView","requireNativeComponent","UnityView","React","Component","constructor","props","postMessage","gameObject","methodName","message","UIManager","dispatchViewManagerCommand","findNodeHandle","getCommand","unloadUnity","pauseUnity","pause","resumeUnity","cmd","Platform","OS","getViewManagerConfig","Commands","getProps","componentWillUnmount","render"],"sources":["index.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  requireNativeComponent,\n  UIManager,\n  findNodeHandle,\n  Platform,\n  NativeSyntheticEvent,\n  ViewStyle,\n} from 'react-native';\n\ninterface UnityMessage {\n  message: string;\n}\n\ntype ReactNativeUnityViewProps = {\n  androidKeepPlayerMounted?: boolean;\n  fullScreen?: boolean;\n  onUnityMessage?: (event: NativeSyntheticEvent<UnityMessage>) => void;\n  onPlayerUnload?: (event: NativeSyntheticEvent<void>) => void;\n  onPlayerQuit?: (event: NativeSyntheticEvent<void>) => void;\n  style?: ViewStyle;\n};\n\nconst ComponentName = 'ReactNativeUnityView';\n\nconst ReactNativeUnityView =\n  requireNativeComponent<ReactNativeUnityViewProps>(ComponentName);\n\nexport default class UnityView extends React.Component<ReactNativeUnityViewProps> {\n  static defaultProps = {};\n\n  constructor(props: ReactNativeUnityViewProps) {\n    super(props);\n  }\n\n  public postMessage(gameObject: string, methodName: string, message: string) {\n    UIManager.dispatchViewManagerCommand(\n      findNodeHandle(this),\n      this.getCommand('postMessage'),\n      [gameObject, methodName, message]\n    );\n  }\n\n  public unloadUnity() {\n    UIManager.dispatchViewManagerCommand(\n      findNodeHandle(this),\n      this.getCommand('unloadUnity'),\n      []\n    );\n  }\n\n  public pauseUnity(pause: boolean) {\n    UIManager.dispatchViewManagerCommand(\n      findNodeHandle(this),\n      this.getCommand('pauseUnity'),\n      [pause]\n    );\n  }\n\n  public resumeUnity() {\n    UIManager.dispatchViewManagerCommand(\n      findNodeHandle(this),\n      this.getCommand('resumeUnity'),\n      []\n    );\n  }\n\n  private getCommand(cmd: string): any {\n    if (Platform.OS === 'ios') {\n      return UIManager.getViewManagerConfig('ReactNativeUnityView').Commands[\n        cmd\n      ];\n    } else {\n      return cmd;\n    }\n  }\n\n  private getProps() {\n    return {\n      ...this.props,\n    };\n  }\n\n  public componentWillUnmount() {\n    this.unloadUnity();\n  }\n\n  public render() {\n    return <ReactNativeUnityView {...this.getProps()} />;\n  }\n}\n"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAsBA,MAAMA,aAAa,GAAG,sBAAtB;AAEA,MAAMC,oBAAoB,GACxB,IAAAC,mCAAA,EAAkDF,aAAlD,CADF;;AAGe,MAAMG,SAAN,SAAwBC,cAAA,CAAMC,SAA9B,CAAmE;EAGhFC,WAAW,CAACC,KAAD,EAAmC;IAC5C,MAAMA,KAAN;EACD;;EAEMC,WAAW,CAACC,UAAD,EAAqBC,UAArB,EAAyCC,OAAzC,EAA0D;IAC1EC,sBAAA,CAAUC,0BAAV,CACE,IAAAC,2BAAA,EAAe,IAAf,CADF,EAEE,KAAKC,UAAL,CAAgB,aAAhB,CAFF,EAGE,CAACN,UAAD,EAAaC,UAAb,EAAyBC,OAAzB,CAHF;EAKD;;EAEMK,WAAW,GAAG;IACnBJ,sBAAA,CAAUC,0BAAV,CACE,IAAAC,2BAAA,EAAe,IAAf,CADF,EAEE,KAAKC,UAAL,CAAgB,aAAhB,CAFF,EAGE,EAHF;EAKD;;EAEME,UAAU,CAACC,KAAD,EAAiB;IAChCN,sBAAA,CAAUC,0BAAV,CACE,IAAAC,2BAAA,EAAe,IAAf,CADF,EAEE,KAAKC,UAAL,CAAgB,YAAhB,CAFF,EAGE,CAACG,KAAD,CAHF;EAKD;;EAEMC,WAAW,GAAG;IACnBP,sBAAA,CAAUC,0BAAV,CACE,IAAAC,2BAAA,EAAe,IAAf,CADF,EAEE,KAAKC,UAAL,CAAgB,aAAhB,CAFF,EAGE,EAHF;EAKD;;EAEOA,UAAU,CAACK,GAAD,EAAmB;IACnC,IAAIC,qBAAA,CAASC,EAAT,KAAgB,KAApB,EAA2B;MACzB,OAAOV,sBAAA,CAAUW,oBAAV,CAA+B,sBAA/B,EAAuDC,QAAvD,CACLJ,GADK,CAAP;IAGD,CAJD,MAIO;MACL,OAAOA,GAAP;IACD;EACF;;EAEOK,QAAQ,GAAG;IACjB,OAAO,EACL,GAAG,KAAKlB;IADH,CAAP;EAGD;;EAEMmB,oBAAoB,GAAG;IAC5B,KAAKV,WAAL;EACD;;EAEMW,MAAM,GAAG;IACd,oBAAO,6BAAC,oBAAD,EAA0B,KAAKF,QAAL,EAA1B,CAAP;EACD;;AA7D+E;;;;gBAA7DtB,S,kBACG,E"}